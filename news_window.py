import main_window
from library import *


class MyWidgetAllNews(QMainWindow):
    """–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–∫—Å—Ç—É –∏ –¥–∞—Ç–µ.
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""

    def __init__(self):
        super().__init__()
        uic.loadUi("./untitled_2.ui", self)
        MyWidgetAllNews.setWindowTitle(self, "All News")
        MyWidgetAllNews.setFixedSize(self, MyWidgetAllNews.width(self), MyWidgetAllNews.height(self))

        self.pushButton.clicked.connect(self.back)
        self.pushButton_2.clicked.connect(self.thread)

        self.pushButton_3.clicked.connect(lambda: self.add_and_sub_count(False))
        self.pushButton_4.clicked.connect(lambda: self.add_and_sub_count(True))
        self.pushButton_5.clicked.connect(lambda: self.favorites_news(self.result[self.count]))
        self.pushButton_6.clicked.connect(self.open_favorites_news)

    def back(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç <–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π>.
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç <–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ>"""
        self.mywidget = main_window.MyWidget()
        self.mywidget.show()
        self.start_stop = False
        self.hide()

    def thread(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≤ –ø–æ—Ç–æ–∫–µ.
        –ú–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–∂–∏–º–∞—Ç—å –µ—ë"""
        self.pushButton_2.setText("–ü–æ–∏—Å–∫ –∏–¥–µ—Çüîç")
        self.pushButton_2.setEnabled(False)
        self.t1 = threading.Thread(target=self.update_db)
        self.t1.daemon = True
        self.t1.start()

    def update_db(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –∏—Ö –¥–∞—Ç–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        url = 'https://1prime.ru/trend/bitcoins/'  # url —Å–∞–π—Ç–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
        self.start_stop = True

        con = sqlite3.connect("./date_news_db.db")
        cur = con.cursor()

        compare_value = cur.execute("""SELECT * FROM date_news""").fetchall()
        if compare_value == []:
            compare_value_data = False
            compare_value_news = False
        else:
            compare_value = compare_value[-1]  # —Å–∞–º–∞—è –Ω–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å
            compare_value_data = compare_value[0]  # –¥–∞—Ç–∞ —Å–∞–º–æ–π –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            compare_value_news = compare_value[1]  # —Ç–µ–∫—Å—Ç —Å–∞–º–æ–π –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏

        while self.start_stop:
            response = requests.get(url)
            soup = BeautifulSoup(response.text, 'lxml')
            quotes = soup.find_all("article", class_="rubric-list__article rubric-list__article_default")

            for quote in quotes:
                date = quote.find("time", class_="rubric-list__article-time").get("datetime")[:10]  # –¥–∞—Ç–∞ –ø—É–±–ª–∏–∞–∫—Ü–∏–∏
                new = quote.find("h2", class_="rubric-list__article-title").text  # —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏

                if (compare_value_data == date) and (compare_value_news == new):
                    self.start_stop = False
                    break
                else:
                    cur.execute("""INSERT INTO date_news(date, news) VALUES(?, ?)""", (date, new,))
                    con.commit()

            url = "https://1prime.ru" + soup.find("a", class_="button button_inline button_rounded button_more").get(
                "href")  # –Ω–æ–≤—ã–π url(–∞–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)

        self.search()

    def search(self):
        """–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º(–¥–∞—Ç–∞, —Ç–µ–∫—Å—Ç)"""
        data = self.calendarWidget.selectedDate()
        data = f"{data.year()}-{data.month()}-{data.day()}"  # –¥–∞—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –≤—ã–≤–µ—Å—Ç–∏
        text = self.textEdit.toPlainText()  # —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –≤—ã–≤–µ—Å—Ç–∏
        search_text = self.checkBox.isChecked()  # —Ñ–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
        search_date = self.checkBox_2.isChecked()  # —Ñ–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –¥–∞—Ç–µ
        self.result = []  # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π

        con = sqlite3.connect("./date_news_db.db")
        cur = con.cursor()

        if (search_text is True) and (search_date is True):
            self.result = cur.execute(f"""SELECT * FROM date_news WHERE date = ? AND news LIKE ?""",
                                      (data, "%" + text + "%",)).fetchall()
        elif search_date is True:
            self.result = cur.execute("""SELECT * FROM date_news WHERE date = ?""", (data,)).fetchall()
        elif search_text is True:
            self.result = cur.execute(f"""SELECT * FROM date_news WHERE news LIKE ?""", ("%" + text + "%",)).fetchall()

        self.pushButton_2.setText("–ü–û–ò–°–öüîç")
        self.pushButton_2.setEnabled(True)

        print(self.result)

        cur.close()

        self.count = 0  # –∏–Ω–¥–µ–∫—Å –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –≤—ã–≤–µ—Å—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
        self.iter_result()

    def iter_result(self):
        """–ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É –Ω–∞–π–¥–µ–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∫–æ–≥–¥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç
        –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            if self.count == 0:
                self.pushButton_3.setEnabled(False)
            else:
                self.pushButton_3.setEnabled(True)

            if self.count + 1 == len(self.result):
                self.pushButton_4.setEnabled(False)
            else:
                self.pushButton_4.setEnabled(True)

            self.label_3.setText(self.result[self.count][0])  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            self.plainTextEdit.setPlainText(self.result[self.count][1])  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏

        except IndexError:
            if self.count == 0:
                self.plainTextEdit.setPlainText("–ù–æ–≤–æ—Å—Ç–µ–π –ù–ï –Ω–∞–π–¥–µ–Ω–æ")

    def add_and_sub_count(self, proverka):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–±–æ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–æ–≤–æ—Å—Ç–∏"""
        if proverka is True:
            self.count += 1
        if proverka is False:
            self.count -= 1
        self.iter_result()

    def favorites_news(self, favorite_news):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î –∏–∑–±—Ä–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
        try:
            date = favorite_news[0]
            news = favorite_news[1]
            con = sqlite3.connect("./date_news_db.db")
            cur = con.cursor()
            cur.execute("""INSERT INTO favorites_news(date, favorite_news) VALUES(?, ?)""",
                        (date, news + "‚òÖ",)).fetchall()
            con.commit()
        except sqlite3.IntegrityError:  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
            return

    def open_favorites_news(self):
        """–í—ã–≤–æ–¥ –≤—Å–µ—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        con = sqlite3.connect("./date_news_db.db")
        cur = con.cursor()
        self.result = cur.execute("""SELECT * FROM favorites_news""").fetchall()
        self.count = 0
        cur.close()
        self.iter_result()
